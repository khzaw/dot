# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

if [[ `uname` == "Darwin" ]]; then
    source $(brew --prefix)/share/antigen/antigen.zsh
else
    source /usr/share/zsh/share/antigen.zsh
fi


antigen use oh-my-zsh
antigen bundle git
antigen bundle git-extras
antigen bundle github
antigen bundle z
antigen bundle command-not-found
antigen bundle zsh-users/zsh-completions
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle zsh-users/zsh-history-substring-search
antigen theme romkatv/powerlevel10k
antigen apply

zmodload zsh/zprof


# if [[ `uname` == "Darwin" ]]; then
    # pyenv init -i
# fi


export FZF_DEFAULT_COMMAND='ag -g ""'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [[ `uname` == "Darwin" ]]; then
    source "$(brew --prefix)/opt/git-extras/share/git-extras/git-extras-completion.zsh"
else
    source /usr/share/doc/git-extras/git-extras-completion.zsh
fi


# eval "$(register-python-argcomplete pipx)"

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true

# poetry completions zsh > ~/.zfunc/_poetry
# fpath+=~/.zfunc


export AWS_SDK_LOAD_CONFIG=1


for file in ~/Code/dot/zsh/{aliases.zsh,functions};
do
  [ -r "$file" ] && [ -f "$file" ] && source "$file"
done
unset file

# eval "$(pyenv virtualenv-init -)"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


if [[ `uname` == "Linux" ]] then
   source /usr/share/nvm/init-nvm.sh
   alias pbcopy='xsel --clipboard --input'
   alias pbpaste='xsel --clipboard --output'
fi

alias diff="$(brew --prefix)/bin/diff"


LAST_REPO="" # start with an empty name

cd() {
	builtin cd "$@" # run the actual cd

	git rev-parse 2>/dev/null # check if you are in a git repository without dumping the output to the screen [1]
	if [ $? -eq 0 ]; then # if return value of previous command is 0 then you are
  CURRENT_REPO=$(basename $(git rev-parse --show-toplevel)) # get name of current repository [2]
		if [ "$LAST_REPO" != "$CURRENT_REPO" ]; then
			onefetch
			LAST_REPO=$CURRENT_REPO
		fi
	fi
}

[[ -s "/home/khz/.gvm/scripts/gvm" ]] && source "/home/khz/.gvm/scripts/gvm"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

eval "$(saml2aws --completion-script-zsh)"