* General
** sanity
  #+BEGIN_SRC emacs-lisp
    (custom-set-variables '(inhibit-startup-screen t))
    (setq vc-follow-symlinks t) ;; don't  ask for confirmation when operating symlinked files
    (setq frame-resize-pixelwise t)
    (setq inhibit-compacting-font-caches t) ;; don't compact font caches during GC
    (setq find-file-visit-truename t) ;; display true names for symlink files
  #+END_SRC
** Tab indents
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq js-indent-level 2)
#+END_SRC
** UI
*** font
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :family "Dank Mono" :height 140)
      (set-face-attribute 'fixed-pitch nil :family "Dank Mono")
      (set-face-attribute 'variable-pitch nil :family "Dank Mono")
    #+END_SRC
*** maximize frame by default
#+BEGIN_SRC emacs-lisp
     (setq initial-frame-alist (quote ((fullscreen . maximized))))
#+END_SRC
*** display column number
    #+BEGIN_SRC emacs-lisp
      (column-number-mode t)
    #+END_SRC
** misc
#+BEGIN_SRC emacs-lisp
      (setq inhibit-splash-screen t)
      (setq ring-bell-function 'ignore)
      (tool-bar-mode -1)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (blink-cursor-mode t)
      (setq blink-cursor-blinks 0) ;; blink forever
      (setq-default indicate-empty-lines t)
      (setq-default line-spacing 3)
      (setq frame-title-format '("Emacs"))
      (set-window-margins (selected-window) 1 1)
      (setq use-dialog-box nil)
  #+END_SRC
** no backup~ files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
#+END_SRC

** C-x k kills current buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k")
  '(lambda () (interactive) (kill-buffer (current-buffer))))
#+END_SRC
* Packages
** doom-modeline
   #+BEGIN_SRC emacs-lisp
    (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
   #+END_SRC
** fancy-battery
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
   (setq fancy-battery-show-percentage t)
   (setq battery-update-interval 15)
   (fancy-battery-mode)
   (display-battery-mode))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t)
#+END_SRC
** editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
    (editorconfig-mode 1)
)
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :defer .1 ;; don't block emacs when starting, load evil immediately after startup
  :init
    (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
    (setq evil-split-window-below t) ;; like vim's 'splitbelow'
    (evil-mode 1)
)
(use-package key-chord
  :ensure key-chord
  :demand key-chord
  :init (key-chord-mode 1)
  :config
  (progn
    (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
   #+END_SRC
** smooth-scrolling
   Override Emacs' default scrolling design: jumping half-page. Added "-aggressively" to prevent the cursor to jump around when user scrolls.
    #+BEGIN_SRC emacs-lisp
    (use-package smooth-scrolling
    :config
    (setq scroll-margin 1
            smooth-scroll-margin 1
            scroll-conservatively 0
            scroll-up-aggressively 0.01
            scroll-down-aggressively 0.01)
    (smooth-scrolling-mode 1))
    #+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :defer 2
      ;; :after (add-node-modules-path)
      :config
        (progn
            (setq web-mode-markup-indent-offset 2
                    web-mode-code-indent-offset 2
                    web-mode-css-indent-offset 2
                    web-mode-style-padding 2
                    web-mode-script-padding 2
                    web-mode-block-padding 2))
    )
#+END_SRC
** prettier-js
   #+BEGIN_SRC emacs-lisp
     (use-package prettier-js
       :ensure t
       :init
       (add-hook 'js-mode-hook 'prettier-js-mode))

   #+END_SRC
** add-node-modules-path
   #+BEGIN_SRC emacs-lisp
     (use-package add-node-modules-path
:ensure t
:init
(add-hook 'web-mode-hook 'add-node-modules_path))
   #+END_SRC
** org
   #+BEGIN_SRC emacs-lisp
     (use-package org-mode
       :config
       (setq org-src-fontify-natively t) ;; fontify code in code blocks
       (setq org-src-tab-acts-natively t)
       (setq org-pretty-entities t)
    )
   #+END_SRC
** org-tempo
   Template expansion of Org structures
   #+begin_src emacs-lisp
    (use-package org-tempo :ensure t :after org)
   #+end_src

** org-bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
** aggressive-indent
   #+BEGIN_SRC emacs-lisp
   (use-package aggressive-indent :ensure t)
   #+END_SRC
** helm
   #+BEGIN_SRC emacs-lisp
               (use-package helm
                 :ensure t
                 :bind (("M-x" . helm-M-x)
                        ("C-x b" . helm-buffers-list)
                        ("C-x C-f" . helm-find-files))
                 :init
                 (setq helm-M-x-fuzzy-match t
                       helm-buffers-fuzzy-matching t
                       helm-recentf-fuzzy-match t
                       ;; helm-split-window-in-side-p t ; open helm buffer inside current window, not occupy whole other window
                       ;; helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source
                       ;; helm-ff-search-library-in-sexp t ; search for library in `require` and `declare-function` sexp.
                       ;; helm-scroll-amount 8
                       ;; helm-ff-file-name-history-use-recentf t
                       ;; helm-mode-fuzzy-match t
                       ;; helm-semantic-fuzzy-match t
                  )
     :config
     (helm-mode 1)
     (require 'helm-config)
          )
   #+END_SRC
** helm-ag
   #+BEGIN_SRC emacs-lisp
     (use-package helm-ag
       :ensure helm-ag
       :bind ("C-c a g" . helm-do-ag-project-root)
     )
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :after (helm)
       :ensure t
       :config
          (projectile-mode)
          (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
          (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
          (projectile-global-mode)
          (setq projectile-completion-system 'helm)
     )
   #+END_SRC
** helm-projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t
       :bind ("M-t" . helm-projectile-find-file)
       :config
         (helm-projectile-on)
     )
   #+END_SRC
** company
   #+begin_src emacs-lisp
                    (use-package company
                      :ensure t
                      :config 
          (global-company-mode)
     (setq company-idle-delay 0.2)
(setq company-show-numbers t)
(setq company-tooltip-align-annotations t)

               )
   #+end_src
** company-quickhelp
   Documentation popups for company
   #+begin_src emacs-lisp
          (use-package company-quickhelp
     :ensure t
     :defer t
:init
(add-hook 'global-company-mode-hook #'company-quickhelp-mode))

   #+end_src
** protobuf-mode
   #+BEGIN_SRC emacs-lisp
   (use-package protobuf-mode
     :ensure t
     :mode ("\\.proto\\'" . protobuf-mode))
   #+END_SRC
** markdown
   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :ensure t
     :mode (("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode)))
   #+END_SRC
** restart-emacs
   #+BEGIN_SRC emacs-lisp
    (use-package restart-emacs :ensure t)
   #+END_SRC
** doom-themes
   #+BEGIN_SRC emacs-lisp
                    (use-package doom-themes
                       :ensure t
                       :config
                           (setq doom-themes-enable-bold t
                                 doom-themes-enable-italic t)
                           (load-theme 'doom-dracula t)
;; enable flashing mode-line on errors
     (doom-themes-visual-bell-config)
          (doom-themes-org-config)
               )
   #+END_SRC
** gitignore-mode
   #+BEGIN_SRC emacs-lisp
     (use-package gitignore-mode :ensure t)
   #+END_SRC
** dockerfile-mode and docker-compose-mode
   #+begin_src emacs-lisp
          (use-package dockerfile-mode :defer t)
     (use-package docker-compose-mode :defer t)
   #+end_src

   #+RESULTS:

** zone
   #+BEGIN_SRC emacs-lisp
     (use-package zone
        :config
        (zone-when-idle 300))
   #+END_SRC
** zone-nyan
   #+BEGIN_SRC emacs-lisp
     (use-package zone-nyan :ensure t :config (setq zone-programs [zone-nyan]))
   #+END_SRC
** python
   #+begin_src emacs-lisp
                    (use-package python
               :config
          (setq python-indent-guess-indent-offset nil) ;; don't try to guess python indent offset
     )
   #+end_src
** python-docstring
   #+begin_src emacs-lisp
          (use-package python-docstring
     :hook ((python-mode . python-docstring-mode)))
   #+end_src

** blacken
   #+begin_src emacs-lisp
          (use-package blacken
     :hook ((python-mode . blacken-mode))
)
   #+end_src
* Reload init.el
#+BEGIN_SRC emacs-lisp
  (defun khzaw/load-init()
    "Reload .emacs.d/init.el"
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
