* General
** sanity
  #+BEGIN_SRC emacs-lisp
(custom-set-variables '(inhibit-startup-screen t))
(setq vc-follow-symlinks t) ;; don't  ask for confirmation when operating symlinked files
(setq frame-resize-pixelwise t)
  #+END_SRC
** Tab indents
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq js-indent-level 2)
#+END_SRC
** UI
*** font
#+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :family "Iosevka" :height 160)
      (set-face-attribute 'fixed-pitch nil :family "Iosevka")
      (set-face-attribute 'variable-pitch nil :family "Iosevka")
#+END_SRC
*** maximize frame by default
#+BEGIN_SRC emacs-lisp
     (setq initial-frame-alist (quote ((fullscreen . maximized))))
#+END_SRC
*** display column number
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq ring-bell-function 'ignore)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode t)
  (setq blink-cursor-blinks 0) ;; blink forever
  (setq-default indicate-empty-lines t)
  (setq-default line-spacing 3)
  (setq frame-title-format '("Emacs"))
  (set-window-margins (selected-window) 1 1)
  #+END_SRC
** no backup~ files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
#+END_SRC

** C-x k kills current buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k")
  '(lambda () (interactive) (kill-buffer (current-buffer))))
#+END_SRC
* Packages
** fancy-battery
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
   (setq fancy-battery-show-percentage t)
   (setq battery-update-interval 15)
   (fancy-battery-mode)
   (display-battery-mode))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key :ensure t)
#+END_SRC
** editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
    (editorconfig-mode 1)
)
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :defer .1 ;; don't block emacs when starting, load evil immediately after startup
  :init
    (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
    (setq evil-split-window-below t) ;; like vim's 'splitbelow'
    (evil-mode 1)
)
(use-package key-chord
  :ensure key-chord
  :demand key-chord
  :init (key-chord-mode 1)
  :config
  (progn
    (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
   #+END_SRC
** smooth-scrolling
   Override Emacs' default scrolling design: jumping half-page. Added "-aggressively" to prevent the cursor to jump around when user scrolls.
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :config
  (setq scroll-margin 1
        smooth-scroll-margin 1
        scroll-conservatively 0
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01)
  (smooth-scrolling-mode 1))
#+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
      (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
      (setq web-mode-markup-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-style-padding 2
            web-mode-script-padding 2
            web-mode-block-padding 2)
    )
#+END_SRC
** prettier-js
   #+BEGIN_SRC emacs-lisp
     (use-package prettier-js
       :init
       (add-hook 'js2-mode-hook 'prettier-js-mode))

   #+END_SRC

** org
   #+BEGIN_SRC emacs-lisp
     (setq org-src-tab-acts-natively t)  
   #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC
** aggressive-indent
   #+BEGIN_SRC emacs-lisp
   (use-package aggressive-indent :ensure t)
   #+END_SRC
** helm
   #+BEGIN_SRC emacs-lisp
   (use-package helm
     :ensure t
     :bind (("M-x" . helm-M-x)
            ("M-y" . helm-show-kill-ring)
            ("C-x b" . helm-mini)
            ("C-x C-f" . helm-find-files))
     :config
     (progn 
        (setq helm-M-x-fuzzy-match t   ; optional fuzzy matching for helm-M-x
            helm-buffers-fuzzy-matching t
            helm-recentf-fuzzy-match t
            helm-split-window-in-side-p t ; open helm buffer inside current window, not occupy whole other window
            helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source
            helm-ff-search-library-in-sexp t ; search for library in `require` and `declare-function` sexp.
            helm-scroll-amount 8
            helm-ff-file-name-history-use-recentf t
            helm-mode-fuzzy-match t
            helm-semantic-fuzzy-match t
            helm-imenu-fuzzy-match t
            helm-echo-input-in-header-line t))
    )
   #+END_SRC
** helm-ag
   #+BEGIN_SRC emacs-lisp
   (use-package helm-ag
     :ensure helm-ag
   )
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :config
       (projectile-mode)
        (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
        (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
        (projectile-global-mode)
        (setq projectile-completion-system 'helm)
   )
   #+END_SRC
** helm-projectile
   #+BEGIN_SRC emacs-lisp
   (use-package helm-projectile
     :ensure t
     :bind ("M-t" . helm-projectile-find-file)
     :config
       (helm-projectile-on)
   )
   #+END_SRC
** protobuf-mode
   #+BEGIN_SRC emacs-lisp
   (use-package protobuf-mode
     :ensure t
     :mode ("\\.proto\\'" . protobuf-mode))
   #+END_SRC
** markdown
   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :ensure t
     :mode (("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode)))
   #+END_SRC
** restart-emacs
   #+BEGIN_SRC emacs-lisp
    (use-package restart-emacs :ensure t)
   #+END_SRC
** themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
        :ensure t
        :config
            (setq doom-themes-enable-bold t
                  doom-themes-enable-italic t)
            (load-theme 'doom-dracula t))
   #+END_SRC
* Reload init.el
#+BEGIN_SRC emacs-lisp
  (defun khzaw/load-init()
    "Reload .emacs.d/init.el"
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
