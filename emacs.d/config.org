* Packages
** sanity
   #+begin_src emacs-lisp
     (use-package emacs
       :config
       (setq frame-title-format '("Emacs")
             ring-bell-function 'ignore
             frame-resize-pixelwise t
             default-directory "~/"
             use-dialog-box nil
             vc-follow-symlinks t              ;; don't ask for confirmation when operating symlinked files
             inhibit-compacting-font-caches t  ;;  don't compact font caches during GC
             find-file-visit-truename t)       ;; display true names for symlink files
       (tool-bar-mode -1)
       (menu-bar-mode -1)

       ;; better scrolling
       (setq scroll-margin 0
             scroll-conservatively 10000
             scroll-preserve-screen-position t
             auto-window-vscroll nil)

       ;; Spaces > Tabs
       (setq-default indent-tabs-mode nil
                     tab-width 2)

       (blink-cursor-mode t)
       (setq blink-cursor-blinks 0) ;; blink forever
       (setq-default indicate-empty-lines t)
       )
             #+end_src
** startup
The option ~use-package-always-ensure~ is turned on in ~init.el~, let's add ~:ensure nil~ when configuring the built-in packages.
#+begin_src emacs-lisp
  (use-package "startup" :ensure nil :config (setq inhibit-startup-screen t))
   #+end_src
** modernize selection behavior
   Replease the active region just by typing test, just like modern text editors
   #+begin_src emacs-lisp
     (use-package delsel :ensure nil :config (delete-selection-mode +1))
   #+end_src
** font
   #+BEGIN_SRC emacs-lisp
     (set-face-attribute 'default nil :family "Fira Code" :height 140)
     (set-face-attribute 'fixed-pitch nil :family "Fira Code")
     (set-face-attribute 'variable-pitch nil :family "Fira Code")
     (setq-default line-spacing 1)
   #+END_SRC
** scroll-bar
   #+begin_src emacs-lisp
     (use-package scroll-bar :ensure nil :config (scroll-bar-mode -1))
   #+end_src
** column-number-mode
   #+BEGIN_SRC emacs-lisp
     (use-package simple :ensure nil :config (setq column-number-mode t))
   #+END_SRC
** files
   #+begin_src emacs-lisp
     (use-package files
       :ensure nil
       :config (setq confirm-kill-processes nil
                     make-backup-files nil
                     auto-save-default nil
                     create-lockiles nil
                     ))
                     #+end_src
** mwheel
   #+begin_src emacs-lisp
     (use-package mwheel
       :ensure nil
       :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                     mouse-wheel-progressive-speed nil))
   #+end_src
** paren
   #+begin_src emacs-lisp
     (use-package paren
       :ensure nil
       :init (setq show-paren-delay 0)
       :config (show-paren-mode +1))
   #+end_src
** elec-pair
   #+begin_src emacs-lisp
     (use-package elec-pair
       :ensure nil
       :hook (prog-mode . electric-pair-mode))
     #+end_src
** whitespace
   Cleanup whitespace on save
   #+begin_src emacs-lisp
     (use-package whitespace :ensure nil :hook (before-save . whitespace-cleanup))
   #+end_src
** dired
   #+begin_src emacs-lisp
     (use-package dired
       :ensure nil
       :config
       (setq delete-by-moving-to-trash t)
       (eval-after-load "dired"
         #'(lambda ()
             (put 'dired-find-alternate-file 'disabled nil)
             (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
   #+end_src
* Third-party packages
** diminish
   #+begin_src emacs-lisp
(use-package diminish :demand t)
   #+end_src
** highlight-numbers + highlight-operators + highlight-escape-sequences
   #+begin_src emacs-lisp
     (use-package highlight-numbers
       :hook (prog-mode . highlight-numbers-mode))

     (use-package highlight-operators
       :hook (prog-mode . highlight-operators-mode))

     (use-package highlight-escape-sequences :hook (prog-mode . hes-mode))
     #+end_src
** exec-path-from-shell
   #+begin_src emacs-lisp
     (use-package exec-path-from-shell
       :ensure t
       :if (memq window-system '(mac ns x))
       :config
       (setenv "SHELL" "/usr/local/bin/zsh")
       (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
       (exec-path-from-shell-initialize)
       )

   #+end_src
** doom-modeline
   #+BEGIN_SRC emacs-lisp
     (use-package doom-modeline
       :ensure t
       :hook (after-init . doom-modeline-mode))
   #+END_SRC
** fancy-battery
   #+BEGIN_SRC emacs-lisp
     (use-package fancy-battery
       :ensure t
       :config
       (setq fancy-battery-show-percentage t)
       (setq battery-update-interval 15)
       (fancy-battery-mode)
       (display-battery-mode))
   #+END_SRC
** which-key
   #+BEGIN_SRC emacs-lisp
     (use-package which-key
       :diminish which-key-mode
       :config
       (which-key-mode +1)
       (setq which-key-idle-delay 0.4
             which-key-idle-secondary-delay 0.4))
#+END_SRC
** editorconfig
   #+BEGIN_SRC emacs-lisp
     (use-package editorconfig
       :ensure t
       :config
       (editorconfig-mode 1)
       )
   #+END_SRC
** evil
   #+BEGIN_SRC emacs-lisp
     (use-package evil
       :ensure t
       :defer .1 ;; don't block emacs when starting, load evil immediately after startup
       :init
       (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
       (setq evil-split-window-below t) ;; like vim's 'splitbelow'
       (evil-mode 1)
       )
     (use-package key-chord
       :ensure t
       :demand key-chord
       :init (key-chord-mode 1)
       :config
       (progn
         (key-chord-define evil-insert-state-map "kj" 'evil-normal-state)))
   #+END_SRC

** magit
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :config
       (global-set-key (kbd "C-x g") 'magit-status))
   #+END_SRC
** evil-magit
   #+begin_src emacs-lisp
     (use-package evil-magit)
   #+end_src

** smooth-scrolling
   Override Emacs' default scrolling design: jumping half-page. Added "-aggressively" to prevent the cursor to jump around when user scrolls.
   #+BEGIN_SRC emacs-lisp
     (use-package smooth-scrolling
       :config
       (setq scroll-margin 1
             smooth-scroll-margin 1
             scroll-conservatively 0
             scroll-up-aggressively 0.01
             scroll-down-aggressively 0.01)
       (smooth-scrolling-mode 1))
   #+END_SRC
** web-mode
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode
       :ensure t
       :defer 2
       ;; :after (add-node-modules-path)
       :config
       (progn
         (setq web-mode-markup-indent-offset 2
               web-mode-code-indent-offset 2
               web-mode-css-indent-offset 2
               web-mode-style-padding 2
               web-mode-script-padding 2
               web-mode-block-padding 2))
       )
   #+END_SRC
** prettier-js
   #+BEGIN_SRC emacs-lisp
     (use-package prettier-js
       :ensure t
       :config
       (add-hook 'js-mode-hook 'prettier-js-mode)
       (add-hook 'web-mode-hook 'prettier-js-mode)
       )
   #+END_SRC
** js2-mode
   #+begin_src emacs-lisp
     (use-package js2-mode
       :ensure t
       :config
       (add-hook 'js-mode-hook 'js2-minor-mode)
       (setq js2-strict-missing-semi-warning nil)
       (setq js2-missing-semi-one-line-override t)
       )
   #+end_src
** add-node-modules-path
   #+BEGIN_SRC emacs-lisp
     (use-package add-node-modules-path
       :ensure t
       :config
       (add-hook 'js-mode-hook 'add-node-modules-path)
       (add-hook 'web-mode-hook 'add-node-modules-path))
   #+END_SRC
** org
   #+BEGIN_SRC emacs-lisp
     (use-package org
       :hook ((org-mode . visual-line-mode)
              (org-mode . org-indent-mode))
       :config
       (require 'org-tempo)
       (setq org-src-fontify-natively t) ;; fontify code in code blocks
       (setq org-src-tab-acts-natively t)
       (setq org-pretty-entities t)
       )
   #+END_SRC
** org-bullets
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook 'org-bullets-mode))
   #+END_SRC

** aggressive-indent
   #+BEGIN_SRC emacs-lisp
     (use-package aggressive-indent :ensure t)
   #+END_SRC
** helm
   #+BEGIN_SRC emacs-lisp
     (use-package helm
       :ensure t
       :bind (("M-x" . helm-M-x)
              ("C-x b" . helm-buffers-list)
              ("C-x C-f" . helm-find-files))
       :init
       (setq helm-M-x-fuzzy-match t
             helm-buffers-fuzzy-matching t
             helm-recentf-fuzzy-match t
             helm-lisp-fuzzy-completion t
             helm-semantic-fuzzy-match t
             helm-autoresize-max-height 0
             helm-autoresize-min-height 20
             helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window
             ;; helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source
             ;; helm-ff-search-library-in-sexp t ; search for library in `require` and `declare-function` sexp.
             ;; helm-scroll-amount 8
             ;; helm-ff-file-name-history-use-recentf t
             ;; helm-mode-fuzzy-match t
             )
       :config
       (helm-mode 1)
       (require 'helm-config)
       )
   #+END_SRC
** helm-ag
   #+BEGIN_SRC emacs-lisp
     (use-package helm-ag
       :ensure helm-ag
       :bind ("C-c a g" . helm-do-ag-project-root)
       )
   #+END_SRC
** projectile
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :after (helm)
       :ensure t
       :config
       (projectile-mode)
       (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-global-mode)
       (setq projectile-completion-system 'helm)
       )
   #+END_SRC
** helm-projectile
   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :ensure t
       :bind ("M-t" . helm-projectile-find-file)
       :config
       (helm-projectile-on)
       )
   #+END_SRC
** company
   #+begin_src emacs-lisp
     (use-package company
       :diminish company-mode
       :config
       (global-company-mode)
       (setq company-minimum-prefix-length 1)
       (setq company-idle-delay 0.1)
       (setq company-tooltip-align-annotations t)
       (with-eval-after-load 'company
         (define-key company-active-map (kbd "C-n") 'company-select-next)
         (define-key company-active-map (kbd "C-p") 'company-select-previous))
       )
   #+end_src

** company-quickhelp
   Documentation popups for company
   #+begin_src emacs-lisp
     (use-package company-quickhelp
       :ensure t
       :defer t
       :init
       (add-hook 'global-company-mode-hook 'company-quickhelp-mode))
   #+end_src
** flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+end_src
** protobuf-mode
   #+BEGIN_SRC emacs-lisp
     (use-package protobuf-mode
       :ensure t
       :mode ("\\.proto\\'" . protobuf-mode))
   #+END_SRC
** markdown
   #+BEGIN_SRC emacs-lisp
   (use-package markdown-mode
     :hook (markdown-mode . visual-line-mode)
     :mode (("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode)))
   #+END_SRC
** restart-emacs
   #+BEGIN_SRC emacs-lisp
    (use-package restart-emacs :ensure t)
   #+END_SRC
** doom-themes
   #+BEGIN_SRC emacs-lisp
     (use-package doom-themes
       :ensure t
       :config
       (setq doom-themes-enable-bold t
             doom-themes-enable-italic t
             )

       (load-theme 'doom-dracula t)
       ;; enable flashing mode-line on errors
       (doom-themes-visual-bell-config)
       (doom-themes-org-config)
       )
   #+END_SRC
** gitignore-mode
   #+BEGIN_SRC emacs-lisp
     (use-package gitignore-mode :ensure t)
   #+END_SRC
** dockerfile-mode and docker-compose-mode
   #+begin_src emacs-lisp
     (use-package dockerfile-mode :defer t)
     (use-package docker-compose-mode :defer t)
   #+end_src
** pyenv-mode
   #+begin_src emacs-lisp
     (use-package pyenv-mode
          :ensure t
          :config
          (add-hook 'python-mode-hook 'pyenv-mode))
   #+end_src
** pyenv-mode-auto
   #+begin_src emacs-lisp
    (use-package pyenv-mode-auto :ensure t)
   #+end_src
** python
   #+begin_src emacs-lisp
     (use-package python
       :interpreter ("python" . python-mode)
       :init
       (defun python-setup-shell ()
         (if (executable-find "ipython")
             (progn (setq python-shell-interpreter "ipython")) (setq python-shell-interpreter "python3")))
       :config
       (add-hook 'python-mode-hook 'python-setup-shell)
       (setq python-indent-guess-indent-offset nil) ;; don't try to guess python indent offset
       (setq py-shell-name "python3")
       (setq py-python-command "python3")
       )
   #+end_src
** py-isort
   #+begin_src emacs-lisp
     (use-package py-isort :ensure t)
   #+end_src
** python-docstring
   #+begin_src emacs-lisp
          (use-package python-docstring
     :hook ((python-mode . python-docstring-mode)))
   #+end_src

** py-autopep8
   #+begin_src emacs-lisp
(use-package py-autopep8 :hook ((python-mode . py-autopep8-enable-on-save))
   #+end_src
** blacken
   #+begin_src emacs-lisp
     (use-package blacken
       :ensure t
       :config
       (add-hook 'python-mode-hook 'blacken-mode))
   #+end_src
* Reload init.el
#+BEGIN_SRC emacs-lisp
  (defun khzaw/load-init()
    "Reload .emacs.d/init.el"
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC
