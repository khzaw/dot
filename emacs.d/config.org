* Packages
** sanity
   #+begin_src emacs-lisp
    (defalias 'yes-or-no-p 'y-or-n-p)
     (setq frame-title-format '("Emacs")
           ring-bell-function 'ignore
           frame-resize-pixelwise t
           default-directory "~/"
           use-dialog-box nil
           vc-follow-symlinks t              ;; don't ask for confirmation when operating symlinked files
           inhibit-compacting-font-caches t  ;;  don't compact font caches during GC
           find-file-visit-truename t)       ;; display true names for symlink files
     (tool-bar-mode -1)
     (menu-bar-mode -1)

     ;; better scrolling
     (setq scroll-margin 0
           scroll-conservatively 10000
           scroll-preserve-screen-position t
           auto-window-vscroll nil)

     ;; Spaces > Tabs
     (setq-default indent-tabs-mode nil
                   tab-width 2)

     (blink-cursor-mode t)
     (setq blink-cursor-blinks 0) ;; blink forever
     (setq-default indicate-empty-lines t)
       #+end_src
** prettify symbols
#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
;; Pretty symbols
(add-hook 'prog-mode-hook (lambda ()
                            (setq prettify-symbols-alist '(("===" . ?≡)
                                                           ("!==" . ?≢) (">=" . ?≥) ("<=" . ?≤)
                                                           ("alpha" . ?α) ("beta" . ?β) ("gamma" . ?γ)
                                                           ("delta" . Δ) ("epsilon" . ?ε) ("zeta" . ?ζ)
                                                           ("eta" . ?η) ("theta" . ?θ) ("lambda" . ?λ)
                                                           ("micro" . ?μ) ("pi" . ?π) ("rho" . ?ρ)
                                                           ("sigma" . ?σ) ("phi" . ?φ) ("omega" . ?Ω)
                                                           ("sqrt" . ?√) ("sum" . ∑) ("infinity" . ∞)
                                                           ("Infinity" . ∞) ("=>" . ?⇒) ("->" . ?→)))))

(defconst javascript--prettify-symbols-alist '(("function" . ?λ)
                                               ("null" . ?∅)))
(add-hook 'js-mode-hook (lambda ()
                          (turn-on-prettify-symbols-mode)
                          (append prettify-symbols-alist javascript--prettify-symbols-alist)))

(add-hook 'js2-mode-hook (lambda ()
                           (turn-on-prettify-symbols-mode)
                           (append prettify-symbols-alist javascript--prettify-symbols-alist)))
#+end_src
** startup
The option ~use-package-always-ensure~ is turned on in ~init.el~, let's add ~:ensure nil~ when configuring the built-in packages.
#+begin_src emacs-lisp
  (use-package "startup" :ensure nil :config (setq inhibit-startup-screen t))
#+end_src
** modernize selection behavior
Replease the active region just by typing test, just like modern text editors
#+begin_src emacs-lisp
  (use-package delsel :ensure nil :config (delete-selection-mode +1))
#+end_src
** ui
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(97 . 97))
(add-to-list 'default-frame-alist '(alpha . (97 . 97)))
 (defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(97 . 97) '(100 . 100)))))
 (global-set-key (kbd "C-c t") 'toggle-transparency)
#+end_src
** font
#+BEGIN_SRC emacs-lisp
  (set-face-attribute 'default nil :family "JetBrains Mono" :height 140)
  (set-face-attribute 'fixed-pitch nil :family "JetBrains Mono")
  (set-face-attribute 'variable-pitch nil :family "JetBrains Mono")
  (setq-default line-spacing 5)
#+END_SRC
** scroll-bar
#+begin_src emacs-lisp
  (use-package scroll-bar :ensure nil :config (scroll-bar-mode -1))
#+end_src
** column-number-mode
#+BEGIN_SRC emacs-lisp
  (use-package simple :ensure nil :config (setq column-number-mode t))
#+END_SRC
** files
#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :config (setq confirm-kill-processes nil
                  make-backup-files nil
                  auto-save-default nil
                  create-lockiles nil
                  ))
#+end_src
** mwheel
#+begin_src emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+end_src
** paren
#+begin_src emacs-lisp
  (use-package paren
    :ensure nil
    :init (setq show-paren-delay 0)
    :config (show-paren-mode t))
#+end_src
** elec-pair
#+begin_src emacs-lisp
  (use-package elec-pair
    :ensure nil
    :config (electric-pair-mode 1))
#+end_src
** whitespace
Cleanup whitespace on save
#+begin_src emacs-lisp
(use-package whitespace :ensure nil :hook (before-save . whitespace-cleanup))
#+end_src
** dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config
  (setq delete-by-moving-to-trash t)
  (eval-after-load "dired"
    #'(lambda ()
        (put 'dired-find-alternate-file 'disabled nil)
        (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
* Third-party packages
** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (setenv "SHELL" "/usr/local/bin/zsh")
  (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
  (exec-path-from-shell-initialize)
  )
#+end_src
** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** all-the-icons-dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :after all-the-icons
  :diminish
  :hook (dired-mode . all-the-icons-dired-mode)
  )
#+end_src
** centaur-tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :demand
  :config
    (setq centaur-tabs-close-button nil)
    (centaur-tabs-group-by-projectile-project)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+end_src
** diminish
#+begin_src emacs-lisp
(use-package diminish :demand t)
#+end_src
** highlight-numbers + highlight-operators + highlight-escape-sequences
#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-operators
  :hook (prog-mode . highlight-operators-mode))

(use-package highlight-escape-sequences :hook (prog-mode . hes-mode))
#+end_src
** doom-modeline
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :config
  (setq doom-modeline-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-buffer-state-icon t
        doom-modeline-buffer-encoding nil
        doom-modeline-buffer-modification-icon t
        doom-modeline-minor-modes nil
        doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
        doom-modeline-buffer-encoding t
        doom-modeline-indent-info t
        doom-modeline-vsc-max-length 50
        doom-modeline-lsp t
        doom-modeline-indent-info nil
        doom-modeline-modal-icon t
        doom-modeline-env-version t
        inhibit-compacting-font-caches t)
  (doom-modeline-mode))
        #+END_SRC
** fancy-battery
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :ensure t
  :config
  (setq fancy-battery-show-percentage t)
  (setq battery-update-interval 15)
  (fancy-battery-mode)
  (display-battery-mode))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode t)
  (setq which-key-idle-delay 0.4
        which-key-idle-secondary-delay 0.4))
#+END_SRC
** editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1)
  )
#+END_SRC
** evil + evil-escape
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :defer .1 ;; don't block emacs when starting, load evil immediately after startup
  :init
  (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
  (setq evil-split-window-below t) ;; like vim's 'splitbelow'
  (evil-mode 1)
  :config
  (evil-set-initial-state 'help-mode 'emacs))

(use-package evil-escape
  :ensure t
  :init (setq-default evil-escape-key-sequence "kj")
  :config
  (evil-escape-mode 1))
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :init
  (setq magit-revision-show-gravatars t)
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
  )
#+END_SRC
** evil-magit
#+begin_src emacs-lisp
(use-package evil-magit)
#+end_src
** forge
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

** smooth-scrolling
Override Emacs' default scrolling design: jumping half-page. Added "-aggressively" to prevent the cursor to jump around when user scrolls.
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :config
  (setq scroll-margin 1
        smooth-scroll-margin 1
        scroll-conservatively 0
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01)
  (smooth-scrolling-mode 1))
#+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :defer 2
  ;; :after (add-node-modules-path)
  :config
  (progn
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-style-padding 2
          web-mode-script-padding 2
          web-mode-block-padding 2))
  )
  #+END_SRC
** js-mode
#+begin_src emacs-lisp
;; (use-package js-mode
;;   :defer t
;;   :config
;;   (progn (add-hook 'js-mode-hook #'add-node-modules-path)
;;          (add-hook 'js-mode-hook #'prettier-js-mode))
;;   )
#+end_src
** prettier-js
#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :config
  (add-hook 'js-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
  )
#+END_SRC
** js2-mode
#+begin_src emacs-lisp
(use-package js2-mode
  :config
  ;; (add-hook 'js-mode-hook 'js2-minor-mode)
  (setq js2-strict-missing-semi-warning nil)
  (setq js2-missing-semi-one-line-override t)
  )
#+end_src
** tide
#+begin_src emacs-lisp
(use-package tide
  :after (typescript-mode company flycheck)
  :hook (
         (js-mode . tide-setup)
         (js2-mode . tide-setup)
         (typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode)
         (before-save . tide-format-before-save)))
  #+end_src
** typescript-mode
#+begin_src emacs-lisp
(use-package typescript-mode)
#+end_src
** emmet-mode
#+begin_src emacs-lisp
;; (use-package emmet-mode
;;   :hook ((html-mode . emmet-mode)
;;          (css-mode . emmet-mode)
;;          (web-mode . emmet-mode))
;;   :custom
;;   (setq emmet-insert-flash-time 0.001)
;;   )
#+end_src
** add-node-modules-path
#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :config
  (add-hook 'js-mode-hook 'add-node-modules-path)
  (add-hook 'web-mode-hook 'add-node-modules-path))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook (org-mode . org-indent-mode)
  :config
  (require 'org-tempo)
  (setq org-src-fontify-natively t) ;; fontify code in code blocks
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-pretty-entities t)
  (setq org-src-preserve-indentation t) ;; should preserve indentation
  (setq org-catch-invisible-edits 'show) ;; Avoid accidentally editing folded regions
  (setq org-use-speed-commands t)
  (setq org-confirm-babel-evaluate nil)
  )
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** midnight
By default it closes a bunch of unused buffers.
#+begin_src emacs-lisp
(use-package midnight
  :ensure nil
  :config
  (setq clean-buffer-list-kill-never-buffer-names '("*scratch*"
                                                    "*Messages*"
                                                    "*dashboard*")))
#+end_src
** spinner
#+begin_src emacs-lisp
(use-package spinner)
#+end_src
** aggressive-indent
#+BEGIN_SRC emacs-lisp
(use-package aggressive-indent)
#+END_SRC
** ivy
#+begin_src emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1) ; globally at startup
  (setq ivy-use-virtual-buffers t
        ivy-height 15
        ivy-display-style 'fancy)
  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  )
#+end_src
** swiper
#+begin_src emacs-lisp
(use-package swiper
  :after ivy
  :bind (("C-s" . 'swiper))
  )
#+end_src
** counsel
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file)
         ("C-c g" . counsel-git)
         ("C-c j" . counsel-git-grep)
         ("C-c a" . counsel-ag)
         ("C-x l" . counsel-locate)
         )
  )
#+end_src
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :after (ivy)
  :init
  (setq projectile-completion-system 'ivy)
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode)
  (projectile-global-mode)
  )
#+END_SRC
** counsel-projectile
#+begin_src emacs-lisp
(use-package counsel-projectile :defer t :after projectile :config (counsel-projectile-mode))
#+end_src
** org-projectile
#+begin_src emacs-lisp
(use-package org-projectile
  :after (:all projectile org)
  :defer t
  :bind
  (:map projectile-command-map
   ("n" . org-projectile-project-todo-completing-read))
  :custom
  (org-projectile-projects-file (expand-file-name "projects.org" org-directory))
  :config
  (push (org-projectile-project-todo-entry) org-capture-templates))
#+end_src
** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

(use-package treemacs-icons-dired
  :after treemacs dired
  :ensure t
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)

(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src
** dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :after
  projectile
  :config
  (add-to-list 'dashboard-items '(projects . 5) t)
  (dashboard-setup-startup-hook))
#+end_src
** sr-speedbar
#+begin_src emacs-lisp
(use-package sr-speedbar :after speedbar)
#+end_src

** projectile-speedbar
#+begin_src emacs-lisp
(use-package projectile-speedbar
  :after (:all projectile sr-speedbar)
  :bind
  (:map projectile-mode-map
    ("C-c p B" . projectile-speedbar-toggle)))
#+end_src
** focus
#+begin_src emacs-lisp
(use-package focus :bind (([f8] . focus-mode)))
#+end_src
** company
#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (global-company-mode)
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 0.1)
  (setq company-require-match nil)
  (setq company-tooltip-align-annotations t)
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
  )
#+end_src

** fancy-narrow
#+begin_src emacs-lisp
(use-package fancy-narrow :config (fancy-narrow-mode))
#+end_src
** company-quickhelp
Documentation popups for company
#+begin_src emacs-lisp
(use-package company-quickhelp
  :ensure t
  :defer t
  :init
  (add-hook 'global-company-mode-hook 'company-quickhelp-mode))
#+end_src
** company-emoji
#+begin_src emacs-lisp
(use-package company-emoji
  :defer t
  :init (setq company-emoji-insert-unicode nil))
#+end_src
** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  (flycheck-add-mode 'javascript-eslint 'js-mode)
  )
#+end_src
** lsp-mode + lsp-ui + company-lsp + lsp-ivy
#+begin_src emacs-lisp
(use-package lsp-mode
  ;; set prefix for lsp-command-key
  :init (setq lsp-keymap-prefix "s-l")
  :hook (
         (lsp-mode . lsp-enable-which-key-integration))
  :config
  (setq lsp-print-performance t)
  (setq lsp-clients-typescript-server "typescript-language-server"
        lsp-clients-typescript-server-args '("--stdio"))
  :commands (lsp lsp-deferred)
  :custom
  (lsp-auto-guess-root t)
  (lsp-prefer-flymake nil)
  )

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :commands lsp-ui-mode
  :custom
  (lsp-ui-flycheck t)
  (lsp-ui-doc-delay 0.2)
  (lsp-ui-eoc-include-signature t)
  (lsp-ui-doc-position 'top)
  (lsp-ui-doc-alignment 'window)
  )
(use-package company-lsp :after (company lsp-mode) :commands company-lsp :init (push 'company-lsp company-backends) :config (setq company-lsp-cache-candidates 'auto))
(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :hook (markdown-mode . visual-line-mode)
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))
#+end_src
** restart-emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs)
#+END_SRC
** origami
#+begin_src emacs-lisp
(use-package origami
  :demand
  :config
  (define-prefix-command 'origami-mode-map)
  (global-set-key (kbd "C-x C-z") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
   ("o" . origami-open-node)
   ("O" . origami-open-node-recursively)
   ("c" . origami-close-node)
   ("C" . origami-close-node-recursively)
   ("a" . origami-toggle-node)
   ("A" . origami-recursively-toggle-node)
   ("R" . origami-open-all-nodes)
   ("M" . origami-close-all-nodes)
   ("v" . origami-show-only-node)
   ("k" . origami-previous-fold)
   ("j" . origami-forward-fold)
   ("x" . origami-reset)))
#+end_src
** doom-themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (doom-themes-org-config))
#+END_SRC
** kaolin-themes
#+begin_src emacs-lisp
(use-package kaolin-themes
  :config
  (kaolin-treemacs-theme)
  (load-theme 'kaolin-light t))
#+end_src
** ample-theme
#+begin_src emacs-lisp
(use-package ample-theme
  :init (progn (load-theme 'ample t t)
               (load-theme 'ample-flat t t)
               (load-theme 'ample-light t t)
               (enable-theme 'ample-light))
  :defer t)
#+end_src

#+RESULTS:

** ace-window
#+begin_src emacs-lisp
(use-package ace-window
  :config
    (global-set-key (kbd "s-w") 'ace-window)
    (global-set-key [rempa other-window] 'ace-window))
#+end_src
** avy
#+begin_src emacs-lisp
(use-package avy
  :bind (("s-." . avy-goto-word-or-subword-1)
         ("s-," . avy-goto-char))
  :config
    (setq avy-background t))
#+end_src
** git-messenger
#+begin_src emacs-lisp
(use-package git-messenger
  :bind ("C-c m" . git-messenger:popup-message)
  :config
  (setq git-messenger:show-detail t
        git-messenger:use-magit-popup t))
#+end_src
** git-timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :bind
  (([f6] . git-timemachine-toggle)))
#+end_src

#+RESULTS:
: git-timemachine-toggle

** gitignore-mode
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode)
#+END_SRC
** dockerfile-mode and docker-compose-mode
#+begin_src emacs-lisp
(use-package dockerfile-mode :defer t)
(use-package docker-compose-mode :defer t)
#+end_src
** pyenv-mode
#+begin_src emacs-lisp
(use-package pyenv-mode
  :config
  (add-hook 'python-mode-hook 'pyenv-mode)
  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))
   (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
  )
#+end_src
** pyenv-mode-auto
#+begin_src emacs-lisp
(use-package pyenv-mode-auto)
#+end_src
** python
#+begin_src emacs-lisp
(use-package python
  :interpreter ("python" . python-mode)
  :init
  (defun python-setup-shell ()
    (if (executable-find "ipython")
        (progn (setq python-shell-interpreter "ipython") (setq python-shell-interpreter "python3"))))
  :config
  (add-hook 'python-mode-hook 'python-setup-shell)
  (setq python-indent-guess-indent-offset nil) ;; don't try to guess python indent offset
  )
#+end_src
** py-isort
#+begin_src emacs-lisp
(use-package py-isort)
#+end_src
** python-docstring
#+begin_src emacs-lisp
(use-package python-docstring
  :hook (python-mode . python-docstring-mode))
#+end_src

** py-autopep8
#+begin_src emacs-lisp
(use-package py-autopep8 :hook (python-mode . py-autopep8-enable-on-save))
#+end_src
** blacken
#+begin_src emacs-lisp
(use-package blacken
  :config
  (add-hook 'python-mode-hook 'blacken-mode))
#+end_src
** pipenv
#+begin_src emacs-lisp
(use-package pipenv
  :hook (python-mode . pipenv-mode)
  :init
  (setq
   pipenv-projectile-after-switch-function
   #'pipenv-projectile-after-switch-extended))
#+end_src
** poetry
#+begin_src emacs-lisp
(use-package poetry :config (poetry-tracking-mode))
#+end_src
** undo-tree
#+begin_src emacs-lisp
(use-package undo-tree)
#+end_src
** haskell-mode
#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src
** minions
#+begin_src emacs-lisp
(use-package minions
  :config (minions-mode 1))
#+end_src
** rainbow-mode
To preview hex colors
#+begin_src emacs-lisp
(use-package rainbow-mode :config (add-hook 'prog-mode-hook #'rainbow-mode))
#+end_src
** auto-package-update
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-interval 4)
    (auto-package-update-maybe))
#+end_src
** nyan-mode
#+begin_src emacs-lisp
(use-package nyan-mode)                 ;
#+end_src
