* General
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t) ;; don't  ask for confirmation when operating symlinked files
(setq frame-resize-pixelwise t)
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp

#+END_SRC
* Editorconfig
#+BEGIN_SRC emacs-lisp
(editorconfig-mode 1)
#+END_SRC
* Evil mode
#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
  (evil-escape-mode 1)
  (evil-ex-define-cmd "q" 'kill-this-buffer)  ; prevent accidentally killing the frame
  (setq-default evil-escape-key-sequence "kj")
  (setq-default evil-escape-delay 0.2)
#+END_SRC

* Tab indents
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 2)
  (setq-default indent-tabs-mode nil)
  (setq js-indent-level 2)
#+END_SRC

* Reload init.el
#+BEGIN_SRC emacs-lisp
  (defun khzaw/load-init()
    "Reload .emacs.d/init.el"
    (interactive)
    (load-file "~/.emacs.d/init.el"))
#+END_SRC

* Smooth Scrolling
Override Emacs' default scrolling design: jumping half-page. Added "-aggressively" to prevent the cursor to jump around when user scrolls.
#+BEGIN_SRC emacs-lisp
  (smooth-scrolling-mode 1)
  (setq scroll-margin 1
        smooth-scroll-margin 1
        scroll-conservatively 0
        scroll-up-aggressively 0.01
        scroll-down-aggressively 0.01)
  (setq-default scroll-up-aggressively 0.01
                scroll-down-aggressively 0.01)
#+END_SRC

* Start-up
** Maximize frame by default
#+BEGIN_SRC emacs-lisp
     (setq initial-frame-alist (quote ((fullscreen . maximized))))
#+END_SRC

** Better looks and defaults
*** Setting default font
#+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :family "Iosevka" :height 160)
      (set-face-attribute 'fixed-pitch nil :family "Iosevka")
      (set-face-attribute 'variable-pitch nil :family "Iosevka")
#+END_SRC

*** Improving / Cleaning up the UI.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq ring-bell-function 'ignore)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode t)
  (setq blink-cursor-blinks 0) ;; blink forever
  (setq-default indicate-empty-lines t)
  (setq-default line-spacing 3)
  (setq frame-title-format '("Emacs"))
  (set-window-margins (selected-window) 1 1)
#+END_SRC
*** Typography
#+BEGIN_SRC emacs-lisp
;; (olivetti-mode 1)  ;; Center text in the buffer
;; (flyspell-mode 1)  ;; Catch spelling mistakes
#+END_SRC

*** No Backup~ Files
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
  (setq create-lockfiles nil)
#+END_SRC
*** Make it very easy to see the line with cursor
*** Display line numbers
*** C-x k kills current buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k")
  '(lambda () (interactive) (kill-buffer (current-buffer))))
#+END_SRC
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC
* Fancy Battery
#+BEGIN_SRC emacs-lisp
(setq fancy-battery-show-percentage t)
(setq battery-update-interval 15)
(fancy-battery-mode)
(display-battery-mode)
#+END_SRC
* Web mode
#+BEGIN_SRC emacs-lisp
(setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
(defun web-mode-init-hook ()
  "Hooks for web mode. Adjust indent."
  (setq web-mode-markup-indent-offset 2))
(add-hook 'web-mode-hook 'web-mode-init-hook)

(defun init-prettier-hook ()
  (add-node-modules-path)
  (prettier-js-mode))

(add-hook 'js-mode-hook 'init-prettier-hook)
#+END_SRC
* Text mode
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook
(lambda ()
(variable-pitch-mode 1)))
#+END_SRC

* Protobuf mode
#+BEGIN_SRC emacs-lisp
(defconst my-protobuf-style
  '((c-basic-offset . 2)
    (indent-tabs-mode . nil)))

(add-hook 'protobuf-mode-hook
  (lambda () (c-add-style "my-style" my-protobuf-style t)))
#+END_SRC
* Markdown mode
#+BEGIN_SRC emacs-lisp
(add-hook 'markdown-mode-hook
  (lambda ()
    (when buffer-file-name
        (add-hook 'after-save-hook 'check-parens nil t))))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
(projectile-mode +1)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+END_SRC
* Helm
#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)

(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

(setq helm-M-x-fuzzy-match t   ; optional fuzzy matching for helm-M-x
      helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match t
      helm-split-window-in-side-p t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source
      helm-ff-search-library-in-sexp t ; search for library in `require` and `declare-function` sexp.
      helm-scroll-amount 8
      helm-ff-file-name-history-use-recentf t
      helm-mode-fuzzy-match t
      helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match t
      helm-echo-input-in-header-line t)

(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 20)
(helm-autoresize-mode 1)
(helm-mode 1)
#+END_SRC
