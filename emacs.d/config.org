* Packages
** osx
#+begin_src emacs-lisp
;; Both command keys are "super"
(setq mac-right-command-modifier 'super)
(setq mac-command-modifier 'super)

;; Opiton or Alt is 'meta'
(setq mac-option-modifier 'meta)
;; Right Alt is not meta, used to type symbols and shit
(setq mac-right-option-modifier 'nil)
#+end_src
** sanity
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . fullheight))
(setq frame-inhibit-implied-resize t)
(setq initial-major-mode 'fundamental-mode)

(setq ansi-color-for-comint-mode t)
;; Don't resize windows & frames in steps;
(setq window-resize-pixelwise t
      frame-resize-pixelwise t)

;; Favor vertical splits over horizontal ones
(setq split-width-threshold 160
      split-height-threshold nil)

;; Show current keystrokes in minibuffer
(setq echo-keystrokes 0.02)

(global-auto-revert-mode t)

(defalias 'yes-or-no-p 'y-or-n-p)
(setq frame-title-format '("Emacs")
      ring-bell-function 'ignore
      frame-resize-pixelwise t
      default-directory "~/"
      use-dialog-box nil
      vc-follow-symlinks t              ;; don't ask for confirmation when operating symlinked files
      inhibit-compacting-font-caches t  ;;  don't compact font caches during GC
      find-file-visit-truename t)       ;; display true names for symlink files
(tool-bar-mode -1)
(menu-bar-mode -1)

;; better scrolling
(setq scroll-margin 10
      scroll-step 1
      next-line-add-newlines nil
      scroll-conservatively 10000
      scroll-preserve-screen-position t
      auto-window-vscroll nil)

;; Spaces > Tabs
(setq-default indent-tabs-mode nil
              tab-width 2)

(blink-cursor-mode t)
(setq blink-cursor-blinks 0) ;; blink forever
(setq-default indicate-empty-lines t)
#+end_src

** prettify symbols
#+begin_src emacs-lisp
(global-prettify-symbols-mode t)
;; Pretty symbols
(add-hook 'prog-mode-hook (lambda ()
                            (setq prettify-symbols-alist '(("===" . ?≡)
                                                           ("!==" . ?≢) (">=" . ?≥) ("<=" . ?≤)
                                                           ("alpha" . ?α) ("beta" . ?β) ("gamma" . ?γ)
                                                           ("delta" . Δ) ("epsilon" . ?ε) ("zeta" . ?ζ)
                                                           ("eta" . ?η) ("theta" . ?θ) ("lambda" . ?λ)
                                                           ("micro" . ?μ) ("pi" . ?π) ("rho" . ?ρ)
                                                           ("sigma" . ?σ) ("phi" . ?φ) ("omega" . ?Ω)
                                                           ("sqrt" . ?√) ("sum" . ∑) ("infinity" . ∞)
                                                           ("Infinity" . ∞) ("=>" . ?⇒) ("->" . ?→)))))

(defconst javascript--prettify-symbols-alist '(("function" . ?λ)
                                               ("null" . ?∅)))
(add-hook 'js-mode-hook (lambda ()
                          (turn-on-prettify-symbols-mode)
                          (append prettify-symbols-alist javascript--prettify-symbols-alist)))

(add-hook 'rjsx-mode-hook (lambda ()
                          (turn-on-prettify-symbols-mode)
                          (append prettify-symbols-alist javascript--prettify-symbols-alist)))

(add-hook 'js2-mode-hook (lambda ()
                           (turn-on-prettify-symbols-mode)
                           (append prettify-symbols-alist javascript--prettify-symbols-alist)))
#+end_src
** startup
The option ~use-package-always-ensure~ is turned on in ~init.el~, let's add ~:ensure nil~ when configuring the built-in packages.
#+begin_src emacs-lisp
  (use-package "startup" :ensure nil :config (setq inhibit-startup-screen t))
#+end_src
** modernize selection behavior
Replease the active region just by typing test, just like modern text editors
#+begin_src emacs-lisp
  (use-package delsel :ensure nil :config (delete-selection-mode +1))
#+end_src
** ui
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha '(97 . 97))
(add-to-list 'default-frame-alist '(alpha . (97 . 97)))
 (defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(97 . 97) '(100 . 100)))))
 (global-set-key (kbd "C-c t") 'toggle-transparency)

#+end_src
** font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Iosevka-14"))
  (setq-default line-spacing 3)

;; Underline looks a bit better when drawn lower
(setq x-underline-at-descent-line t)
#+END_SRC
** scroll-bar
#+begin_src emacs-lisp
  (use-package scroll-bar :ensure nil :config (scroll-bar-mode -1))
#+end_src
** column-number-mode
#+BEGIN_SRC emacs-lisp
  (use-package simple :ensure nil :config (setq column-number-mode t))
#+END_SRC
** files
#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :config (setq confirm-kill-processes nil
                  make-backup-files nil
                  auto-save-default nil
                  create-lockiles nil
                  ))
#+end_src
** mwheel
#+begin_src emacs-lisp
  (use-package mwheel
    :ensure nil
    :config (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))
                  mouse-wheel-progressive-speed nil))
#+end_src
** paren
#+begin_src emacs-lisp
(use-package paren
  :ensure nil
  :init (setq show-paren-delay 0
              show-paren-highlight-openparen t
              show-paren-when-point-inside-paren t
              show-paren-when-point-in-periphery t
              show-paren-style 'mixed)
  :config (show-paren-mode t))
#+end_src
** elec-pair
#+begin_src emacs-lisp
  (use-package elec-pair
    :ensure nil
    :config (electric-pair-mode 1))
#+end_src
** whitespace
Cleanup whitespace on save
#+begin_src emacs-lisp
(use-package whitespace :ensure nil :hook (before-save . whitespace-cleanup))
#+end_src
** dired
#+begin_src emacs-lisp
(use-package dired
  :ensure nil
  :config
  (setq delete-by-moving-to-trash t)
  (eval-after-load "dired"
    #'(lambda ()
        (put 'dired-find-alternate-file 'disabled nil)
        (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file))))
#+end_src
** line-numbers
Show native line numbers if possible, otherwise use ~linum~.
#+begin_src emacs-lisp
(if (fboundp 'display-line-numbers-mode)
    (use-package display-line-numbers :ensure nil)
  (use-package linum-off
    :demand
    :defines linum-format
    :hook (after-init . global-linum-mode)
    :init (setq linum-format "%4d ")
    :config
    ;; Highlight current line number
    (use-package hlinum
      :defines linum-highlight-in-all-buffersp
      :custom-face (linum-highlight-face ((t (:inherit default :background nil :foreground nil))))
      :hook (global-linum-mode . hlinum-activate)
      :init (setq linum-highlight-in-all-buffersp t))))
#+end_src

** imenu
#+begin_src emacs-lisp
(use-package imenu
  :ensure nil
  :bind ("C-." . imenu))
#+end_src
** hideshow
#+begin_src emacs-lisp
(use-package hideshow
  :ensure nil
  :diminish hs-minor-mode
  :bind (:map hs-minor-mode-map
              ("C-`" . hs-toggle-hiding)))
#+end_src
** shell
#+begin_src emacs-lisp
(add-hook 'shell-mode-hook #'hide-mode-line-mode)
(add-hook 'term-mode-hook #'hide-mode-line-mode)
#+end_src
* Third-party packages
** exec-path-from-shell
#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :config
  (setenv "SHELL" "/usr/local/bin/zsh")
  (setq exec-path-from-shell-variables '("PATH" "GOPATH"))
  (exec-path-from-shell-initialize)
  )
#+end_src
** all-the-icons
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** all-the-icons-dired
#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :after all-the-icons
  :diminish
  :hook (dired-mode . all-the-icons-dired-mode)
  )
#+end_src
** centaur-tabs
#+begin_src emacs-lisp
(use-package centaur-tabs
  :demand
  :config
    (setq centaur-tabs-close-button nil)
    (centaur-tabs-group-by-projectile-project)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+end_src
** diminish
#+begin_src emacs-lisp
(use-package diminish :demand t)
#+end_src
** highlight-numbers + highlight-operators + highlight-escape-sequences
#+begin_src emacs-lisp
(use-package highlight-numbers
  :hook (prog-mode . highlight-numbers-mode))

(use-package highlight-operators
  :hook (prog-mode . highlight-operators-mode))

(use-package highlight-escape-sequences :hook (prog-mode . hes-mode))
#+end_src
** doom-modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :config
  (setq doom-modeline-icon t
        doom-modeline-major-mode-icon t
        doom-modeline-major-mode-color-icon t
        doom-modeline-buffer-state-icon t
        doom-modeline-buffer-encoding nil
        doom-modeline-buffer-modification-icon t
        doom-modeline-buffer-file-name-style 'truncate-upto-root
        doom-modeline-minor-modes nil
        doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode)
        doom-modeline-buffer-encoding nil
        doom-modeline-vsc-max-length 50
        doom-modeline-height 1
        doom-modeline-lsp t
        doom-modeline-indent-info nil
        doom-modeline-modal-icon t
        doom-modeline-env-version t)
  (set-face-attribute 'mode-line nil :family "Iosevka Type" :height 150)
  (set-face-attribute 'mode-line-inactive nil :family "Iosevka Type" :height 150)
  (doom-modeline-mode))
#+end_src
** solaire-mode
#+begin_src emacs-lisp
(use-package solaire-mode
  :hook
  ((change-major-mode after-revert ediff-prepare-buffer) . turn-on-solaire-mode)
  (minibuffer-setup . solaire-mode-in-minibuffer)
  :config
  (solaire-global-mode +1)
  (solaire-mode-swap-bg))
#+end_src
** hide-mode-line
#+begin_src emacs-lisp
(use-package hide-mode-line
  :hook (((completion-list-mode completion-in-region-mode) . hide-mode-line-mode)))
#+end_src
** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode t)
  (setq which-key-idle-delay 0.4
        which-key-idle-secondary-delay 0.4))
#+END_SRC
** editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :config
  (editorconfig-mode 1)
  )
#+END_SRC
** evil + evil-escape
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :defer .1 ;; don't block emacs when starting, load evil immediately after startup
  :init
  (setq evil-vsplit-window-right t) ;; like vim's 'splitright'
  (setq evil-split-window-below t) ;; like vim's 'splitbelow'
  (evil-mode 1)
  :config
  (evil-set-initial-state 'help-mode 'emacs)
  (evil-set-initial-state 'dashboard-mode 'emacs))

(use-package evil-escape
  :ensure t
  :init (setq-default evil-escape-key-sequence "kj")
  :config
  (evil-escape-mode 1))
#+END_SRC
** magit
#+begin_src emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status)
  :init
  (setq magit-revision-show-gravatars t)
  (add-hook 'after-save-hook 'magit-after-save-refresh-status t)
  )
#+end_src
** evil-magit
#+begin_src emacs-lisp
(use-package evil-magit)
#+end_src
** magit-todos
#+begin_src emacs-lisp
(use-package magit-todos
  :disabled
  :hook (magit-mode . magit-todos-mode))
#+end_src
** elm-mode
#+begin_src emacs-lisp
(use-package elm-mode
  :mode "\\.elm\\'"
  :init
    (setq elm-format-on-save t))
#+end_src
** forge
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src

** web-mode
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer 2
  ;; :after (add-node-modules-path)
  :config
  (progn
    (setq web-mode-markup-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-style-padding 2
          web-mode-script-padding 2
          web-mode-block-padding 2))
  )
  #+END_SRC
** prettier-js
#+BEGIN_SRC emacs-lisp
(use-package prettier-js
  :config
  (add-hook 'typescript-mode-hook 'prettier-js-mode)
  (add-hook 'js-mode-hook 'prettier-js-mode)
  (add-hook 'web-mode-hook 'prettier-js-mode)
  )
#+END_SRC
** js2-mode
#+begin_src emacs-lisp
(use-package js2-mode
  :config
  ;; (add-hook 'js-mode-hook 'js2-minor-mode)
  (setq js2-strict-missing-semi-warning nil)
  (setq js2-missing-semi-one-line-override t)
  )
#+end_src
** rjsx-mode
#+begin_src emacs-lisp
(use-package rjsx-mode
  :defer t
  :mode ("\\.js\\'" . rjsx-mode))
#+end_src
** tide
#+begin_src emacs-lisp
(use-package tide
  :after (typescript-mode company flycheck)
  :hook ((js-mode . tide-setup)
         (rjsx-mode . tide-setup)
         (typescript-mode . tide-setup)
         (typescript-mode . tide-hl-identifier-mode))
:config
(setq tide-completion-detailed t
      tide-always-show-documentation t))
  #+end_src
** typescript-mode
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode (("\\.ts\\'" . typescript-mode)
         ("\\.tsx\\'" . typescript-mode)))
#+end_src
** emmet-mode
#+begin_src emacs-lisp
;; (use-package emmet-mode
;;   :hook ((html-mode . emmet-mode)
;;          (css-mode . emmet-mode)
;;          (web-mode . emmet-mode))
;;   :custom
;;   (setq emmet-insert-flash-time 0.001)
;;   )
#+end_src
** add-node-modules-path
#+BEGIN_SRC emacs-lisp
(use-package add-node-modules-path
  :config
  (add-hook 'js-mode-hook 'add-node-modules-path)
  (add-hook 'typescript-mode-hook 'add-node-modules-path)
  (add-hook 'rjsx-mode-hook 'add-node-modules-path)
  (add-hook 'web-mode-hook 'add-node-modules-path))
#+END_SRC
** org
#+BEGIN_SRC emacs-lisp
(use-package org
  :hook (org-mode . org-indent-mode)
  :config
  (require 'org-tempo)
  (setq org-src-fontify-natively t) ;; fontify code in code blocks
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
  (setq org-pretty-entities t)
  (setq org-src-preserve-indentation t) ;; should preserve indentation
  (setq org-catch-invisible-edits 'show) ;; Avoid accidentally editing folded regions
  (setq org-use-speed-commands t)
  (setq org-confirm-babel-evaluate nil)
  )
#+END_SRC
** org-bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC
** midnight
By default it closes a bunch of unused buffers.
#+begin_src emacs-lisp
(use-package midnight
  :ensure nil
  :config
  (setq clean-buffer-list-kill-never-buffer-names '("*scratch*"
                                                    "*Messages*"
                                                    "*dashboard*")))
#+end_src
** spinner
#+begin_src emacs-lisp
(use-package spinner)
#+end_src
** aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :diminish
  :hook ((after-init . global-aggressive-indent-mode)
         ;; Disable in big files due to the performance issues
         (find-file . (lambda ()
                        (if (> (buffer-size) (* 3000 80))
                            (aggressive-indent-mode -1)))))
  :config
  (dolist (mode '(asm-mode web-mode html-mode css-mode go-mode prolog-inferior-mode))
    (push mode aggressive-indent-excluded-modes))
  (add-to-list 'aggressive-indent-protected-commands #'delete-trailing-whitespace t)
  (add-to-list 'aggressive-indent-dont-indent-if
               '(and (derived-mode-p 'c-mode 'c++mode 'csharp-mode
                                     'java-mode 'go-mode 'swift-mode)
                     (null (string-match "\\([;{}]\\|\\b\\(if\\|for\\|while\\)\\b\\)" (thing-at-point 'line))))))
#+end_src
** paredit
#+begin_src emacs-lisp
(use-package paredit
  :hook ((clojure-mode emacs-lisp-mode) . paredit-mode)
  :diminish (paredit paredit-mode))
#+end_src
** sicp
#+begin_src emacs-lisp
(use-package sicp)
#+end_src
** window-numbering
Allows switching between buffers using meta-(#key)
#+begin_src emacs-lisp
(use-package window-numbering
  :config
  (eval-when-compile
    (declare-function window-numbering-mode "window-numbering.el"))
  (window-numbering-mode t))
#+end_src
** sml-mode
#+begin_src emacs-lisp
(use-package sml-mode
  :mode "\\.sml\'"
  :custom
  (sml-electric-pipe-mode nil)) ;; Make typing '|' insert a literal '|' only.
#+end_src
** smart-region
#+begin_src emacs-lisp
(use-package smart-region
  :hook (after-init . smart-region-on))
#+end_src
** ivy
#+begin_src emacs-lisp
(use-package ivy
  :bind ("C-c C-r". ivy-resume)
  :defer 0.5
  :config
  (ivy-mode 1) ; globally at startup
  (setq ivy-use-virtual-buffers t
        ivy-height 15
        ivy-display-style 'fancy)
  :custom
  (ivy-format-function 'ivy-format-function))
#+end_src
** ivy-rich
#+begin_src emacs-lisp
(use-package ivy-rich :init (ivy-rich-mode 1))
(use-package all-the-icons-ivy-rich :init (all-the-icons-ivy-rich-mode 1))
#+end_src
** swiper
#+begin_src emacs-lisp
(use-package swiper
  :after ivy
  :bind (("C-s" . 'swiper))
  )
#+end_src
** counsel
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("<f2> u" . counsel-unicode-char)
         ("<f1> f" . counsel-describe-function)
         ("<f1> v" . counsel-describe-variable)
         ("C-x C-f" . counsel-find-file)
         ("C-c g" . counsel-git)
         ("C-c j" . counsel-git-grep)
         ("C-c a" . counsel-ag)
         ("C-c f" . counsel-fzf)
         ("C-x l" . counsel-locate)
         )
  :config
    (setq ivy-initial-inputs-alist nil)
  :custom
    (ivy-format-function 'ivy-format-function-arrow)
    (counsel-yank-pop-separator "\n-------\n"))
#+end_src
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :after (ivy)
  :init
  (setq projectile-completion-system 'ivy)
  :config
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (projectile-mode)
  (projectile-global-mode)
  )
#+END_SRC
** counsel-projectile
#+begin_src emacs-lisp
(use-package counsel-projectile :defer t :after projectile :config (counsel-projectile-mode))
#+end_src
** org-projectile
#+begin_src emacs-lisp
(use-package org-projectile
  :after (:all projectile org)
  :defer t
  :bind
  (:map projectile-command-map
   ("n" . org-projectile-project-todo-completing-read))
  :custom
  (org-projectile-projects-file (expand-file-name "projects.org" org-directory))
  :config
  (push (org-projectile-project-todo-entry) org-capture-templates))
#+end_src
** amx
#+begin_src emacs-lisp
(use-package amx :defer 0.5 :config (amx-mode))
(use-package flx)
#+end_src
** treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :commands (treemacs-follow-mode
             treemacs-filewatch-mode
             treemacs-fringe-indicator-mode
             treemacs-git-mode)
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         t
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              t
          treemacs-silent-refresh                t
          treemacs-sorting                       'alphabetic-case-insensitive-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         30)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;; (treemacs-resize-icons 44)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null treemacs-python-executable)))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil)

(use-package treemacs-projectile
  :after treemacs projectile)

(use-package treemacs-icons-dired
  :after treemacs dired
  :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :commands treemacs-magit--schedule-update
  :hook ((magit-post-commit
          git-commit-post-finish-hook
          magit-post-stage
          magit-post-unstage)
         . treemacs-magit--schedule-update))

(use-package treemacs-persp
  :after treemacs persp-mode
  :ensure t
  :config (treemacs-set-scope-type 'Perspectives))
#+end_src
** dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :diminish (dashboard-mode)
  :after projectile
  :config
  (setq dashboard-set-heading-icons t)
  (setq dashboard-center-content t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-startup-banner 'logo)
  (setq dashboard-items '((projects . 5)
                          (recents . 5)
                          (agenda . 5)))
  (dashboard-setup-startup-hook))
#+end_src
** sr-speedbar
#+begin_src emacs-lisp
(use-package sr-speedbar :after speedbar)
#+end_src

** projectile-speedbar
#+begin_src emacs-lisp
(use-package projectile-speedbar
  :after (:all projectile sr-speedbar)
  :bind
  (:map projectile-mode-map
    ("C-c p B" . projectile-speedbar-toggle)))
#+end_src
** focus
#+begin_src emacs-lisp
(use-package focus :bind (([f8] . focus-mode)))
#+end_src
** company
#+begin_src emacs-lisp
(use-package company
  :diminish company-mode
  :defer 5
  :init
  (setq company-minimum-prefix-length 1
        company-tooltip-limit 14
        company-idle-delay 0  ;; Zero delay when pressing tab
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case nil
        company-dabbrev-code-other-buffers t
        company-tooltip-align-annotations t
        company-require-match 'never
        company-global-modes
        '(not erc-mode message-mode help-mode gud-mode eshell-mode)
        company-backends '(company-capf)
        company-frontends
        '(company-pseudo-tooltip-frontend
          company-echo-metadata-frontend))
  :config
  (add-hook 'company-mode-hook #'evil-normalize-keymaps)
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
  (global-company-mode +1)
  )
#+end_src
** fancy-narrow
#+begin_src emacs-lisp
(use-package fancy-narrow
  :diminish
  :hook (after-init . fancy-narrow-mode))
#+end_src
** company-quickhelp
Documentation popups for company
#+begin_src emacs-lisp
(use-package company-quickhelp
  :defer t
  :init
  (add-hook 'global-company-mode-hook 'company-quickhelp-mode))
#+end_src
** company-emoji
#+begin_src emacs-lisp
(use-package company-emoji
  :defer t
  :init (setq company-emoji-insert-unicode nil))
#+end_src
** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode)
  :config
  (flycheck-add-mode 'javascript-eslint 'js-mode)
  )
#+end_src
** lsp-mode + lsp-ui + company-lsp + lsp-ivy
#+begin_src emacs-lisp
(use-package lsp-mode
  ;; set prefix for lsp-command-key
  :init (setq lsp-keymap-prefix "s-l"
              lsp-keep-workspace-alive nil
              lsp-auto-guess-root t
              lsp-document-sync-method 'incremental
              lsp-response-timeout 5
              lsp-prefer-flymake 'flymake)
  :hook (
         (prog-mode . lsp-deferred)
         (lsp-mode . lsp-enable-which-key-integration))
  :config
  (setq lsp-clients-typescript-server "typescript-language-server"
        lsp-clients-typescript-server-args '("--stdio"))
  (require 'lsp-clients)
  :commands (lsp lsp-deferred)
  )

(use-package lsp-ui
  :hook (lsp-mode . lsp-ui-mode)
  :commands lsp-ui-mode
  :custom
  (lsp-ui-flycheck t)
  (lsp-ui-doc-enable t)
  (lsp-ui-doc-header t)
  (lsp-ui-doc-border (face-foreground 'default))
  (lsp-ui-doc-include-signature t)
  (lsp-ui-doc-max-width 150)
  (lsp-ui-doc-max-height 30)
  (lsp-ui-doc-position 'at-point)
  (lsp-ui-doc-use-childframe t)
  (lsp-ui-doc-use-webkit t)
  (lsp-ui-doc-alignment 'window)
  ;; lsp-ui-flycheck
  (lsp-ui-flycheck-enable nil)
  ;; lsp-ui-imenu
  (lsp-ui-imenu-enable t)
  ;; lsp-ui-peek
  (lsp-ui-peek-enable t)
  (lsp-ui-peek-peek-height 20)
  (lsp-ui-peek-list-width 50)
  (lsp-ui-peek-fontify 'on-demand)
  :bind
  (:map lsp-mode-map
        ("C-c C-r" . lsp-ui-peek-find-references)
        ("C-c C-d" . lsp-ui-peek-find-definitions)
        ("C-c m" . lsp-ui-imenu)
        ("C-c s" . lsp-ui-sideline-mode))
  )

(use-package company-lsp
  :after (company lsp-mode)
  :commands company-lsp
  :init (push 'company-lsp company-backends)
  :config (setq company-lsp-cache-candidates t)
  (setq company-lsp-async t)
  (setq company-lsp-enable-recompletion nil)
  (add-to-list 'company-lsp-filter-candidates '(mspyls))
  (with-no-warnings
    (defun my-company-lsp--on-completion (response prefix)
      "Handle completion RESPONSE.
PREFIX is a string of the prefix when the completion is requested.
Return a list of strings as the completion candidates."
      (let* ((incomplete (and (hash-table-p response) (gethash "isIncomplete" response)))
             (items (cond ((hash-table-p response) (gethash "items" response))
                          ((sequencep response) response)))
             (candidates (mapcar (lambda (item)
                                   (company-lsp--make-candidate item prefix))
                                 (lsp--sort-completions items)))
             (server-id (lsp--client-server-id (lsp--workspace-client lsp--cur-workspace)))
             (should-filter (or (eq company-lsp-cache-candidates 'auto)
                                (and (null company-lsp-cache-candidates)
                                     (company-lsp--get-config company-lsp-filter-candidates server-id)))))
        (when (null company-lsp--completion-cache)
          (add-hook 'company-completion-cancelled-hook #'company-lsp--cleanup-cache nil t)
          (add-hook 'company-completion-finished-hook #'company-lsp--cleanup-cache nil t))
        (when (eq company-lsp-cache-candidates 'auto)
          ;; Only cache candidates on auto mode. If it's t company caches the
          ;; candidates for us.
          (company-lsp--cache-put prefix (company-lsp--cache-item-new candidates incomplete)))
        (if should-filter
            (company-lsp--filter-candidates candidates prefix)
          candidates)))
    (advice-add #'company-lsp--on-completion :override #'my-company-lsp--on-completion)))

(use-package lsp-ivy
    :after lsp-mode
    :bind (:map lsp-mode-map
        ([remap xref-find-apropos] . lsp-ivy-workspace-symbol)
        ("C-s-." . lsp-ivy-global-workspace-symbol)))
#+end_src
** imenu-list
#+begin_src emacs-lisp
(use-package imenu-list
  :bind
  ("<f10>" . imenu-list-smart-toggle)
  :custom-face
  (imenu-list-entry-face-1 ((t (:foreground "white"))))
  :custom
  (imenu-list-focus-after-activation t)
  (imenu-list-auto-resize nil))
#+end_src
** highlight-indent-guides
#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :diminish
  :hook
  ((prog-mode yaml-mode) . highlight-indent-guides-mode)
  :custom
  (highlight-indent-guites-auto-enabled t)
  (highlight-indent-guides-responsive t)
  (highlight-indent-guides-method 'character)) ; column
#+end_src
** volatile-highlights
#+begin_src emacs-lisp
(use-package volatile-highlights
  :diminish
  :hook
  (after-init . volatile-highlights-mode))
#+end_src
** rainbow-delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src
** posframe
#+begin_src emacs-lisp
(use-package posframe)
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
  :hook (markdown-mode . visual-line-mode)
  :mode (("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode)))
#+end_src
** restart-emacs
#+begin_src emacs-lisp
(use-package restart-emacs)
#+end_src
** origami
#+begin_src emacs-lisp
(use-package origami
  :demand
  :config
  (define-prefix-command 'origami-mode-map)
  (setq origami-show-fold-header t)
  (global-set-key (kbd "C-c o") 'origami-mode-map)
  (global-origami-mode)
  :bind
  (:map origami-mode-map
   ("o" . origami-open-node)
   ("O" . origami-open-node-recursively)
   ("c" . origami-close-node)
   ("C" . origami-close-node-recursively)
   ("a" . origami-toggle-node)
   ("A" . origami-recursively-toggle-node)
   ("R" . origami-open-all-nodes)
   ("M" . origami-close-all-nodes)
   ("v" . origami-show-only-node)
   ("k" . origami-previous-fold)
   ("j" . origami-forward-fold)
   ("x" . origami-reset)))
#+end_src
** ace-window
#+begin_src emacs-lisp
(use-package ace-window
  :config
    (global-set-key (kbd "s-w") 'ace-window)
    (global-set-key [remap other-window] 'ace-window))
#+end_src
** avy
#+begin_src emacs-lisp
(use-package avy
  :bind (("C-:" . avy-goto-char)
         ("C-'" . avy-goto-char-2)
          ("M-g f" . avy-goto-line)
          ("M-g w" . avy-goto-word-1)
          ("M-g e" . avy-goto-word-0))
  :hook (after-init . avy-setup-default)
  :config
  (setq avy-background t
        avy-all-windows nil
        avy-all-windows-alt t
        avy-style 'pre))
#+end_src
** git-messenger
#+begin_src emacs-lisp
(use-package git-messenger
  :bind ("C-c m" . git-messenger:popup-message)
  :config
  (setq git-messenger:show-detail t
        git-messenger:use-magit-popup t))
#+end_src
** git-timemachine
#+begin_src emacs-lisp
(use-package git-timemachine
  :bind
  (([f6] . git-timemachine-toggle)))
#+end_src
** git-gutter
#+begin_src emacs-lisp
(use-package git-gutter
  :custom
  (git-gutter:modified-sign "~")
  (git-gutter:added-sign "+")
  (git-gutter:deleted-sign "-")
  :custom-face
  (git-gutter:modified ((t (:background "#f1fa8c"))))
  (git-gutter:added ((t (:background "#50fa7b"))))
  (git-gutter:deleted ((t (:background "#ff79c6"))))
  :config
  (global-git-gutter-mode t))
#+end_src
** gitignore-mode
#+BEGIN_SRC emacs-lisp
(use-package gitignore-mode)
#+END_SRC
** fill-column-indicator
Nice to have something to show if it exceeds recommended line length
#+begin_src emacs-lisp
(use-package fill-column-indicator
  :hook
  ((python-mode git-commit-mode) . fci-mode))
#+end_src
** dockerfile-mode and docker-compose-mode
#+begin_src emacs-lisp
(use-package dockerfile-mode :defer t)
(use-package docker-compose-mode :defer t)
#+end_src
** pyenv-mode
#+begin_src emacs-lisp
(use-package pyenv-mode
  :config
  (add-hook 'python-mode-hook 'pyenv-mode)
  (defun projectile-pyenv-mode-set ()
    "Set pyenv version matching project name."
    (let ((project (projectile-project-name)))
      (if (member project (pyenv-mode-versions))
          (pyenv-mode-set project)
        (pyenv-mode-unset))))
   (add-hook 'projectile-after-switch-project-hook 'projectile-pyenv-mode-set)
  )
#+end_src
** pyenv-mode-auto
#+begin_src emacs-lisp
(use-package pyenv-mode-auto)
#+end_src
** python
#+begin_src emacs-lisp
(use-package python
  :interpreter ("python" . python-mode)
  :init
  (defun python-setup-shell ()
    (if (executable-find "ipython")
        (progn (setq python-shell-interpreter "ipython") (setq python-shell-interpreter "python3"))))
  :config
  (add-hook 'python-mode-hook 'python-setup-shell)
  (setq python-indent-guess-indent-offset nil) ;; don't try to guess python indent offset
  )
#+end_src
** py-isort
#+begin_src emacs-lisp
(use-package py-isort)
#+end_src
** python-docstring
#+begin_src emacs-lisp
(use-package python-docstring
  :hook (python-mode . python-docstring-mode))
#+end_src

** py-autopep8
#+begin_src emacs-lisp
(use-package py-autopep8 :hook (python-mode . py-autopep8-enable-on-save))
#+end_src
** blacken
#+begin_src emacs-lisp
(use-package blacken
  :config
  (add-hook 'python-mode-hook 'blacken-mode))
#+end_src
** pipenv
#+begin_src emacs-lisp
(use-package pipenv
  :hook (python-mode . pipenv-mode)
  :init
  (setq
   pipenv-projectile-after-switch-function
   #'pipenv-projectile-after-switch-extended))
#+end_src
** poetry
#+begin_src emacs-lisp
(use-package poetry :defer t :config (poetry-tracking-mode))
#+end_src
** undo-tree
#+begin_src emacs-lisp
(use-package undo-tree
  :diminish
  :hook (after-init . global-undo-tree-mode)
  :init
  (setq undo-tree-visualizer-timestamps t
        undo-tree-enable-undo-in-region nil
        undo-tree-auto-save-history nil)

        ;; keep the diff window
        (with-no-warnings
          (make-variable-buffer-local 'undo-tree-visualizer-diff)
          (setq-default undo-tree-visualizer-diff t)))
#+end_src
** haskell-mode
#+begin_src emacs-lisp
(use-package haskell-mode)
#+end_src
** minions
#+begin_src emacs-lisp
(use-package minions
  :config (minions-mode 1))
#+end_src
** rainbow-mode
To preview hex colors
#+begin_src emacs-lisp
(use-package rainbow-mode :config (add-hook 'prog-mode-hook #'rainbow-mode))
#+end_src
** auto-package-update
#+begin_src emacs-lisp
(use-package auto-package-update
  :ensure t
  :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-interval 4)
    (auto-package-update-maybe))
#+end_src
** nyan-mode
#+begin_src emacs-lisp
(use-package nyan-mode)                 ;
#+end_src
** kurecolor
#+begin_src emacs-lisp
(use-package kurecolor)
#+end_src
** spotify
#+begin_src emacs-lisp
(use-package counsel-spotify
  :after counsel
  :init
  (setq counsel-spotify-client-id "531328dc75c640eca9dca6b397021b2b"
        counsel-spotify-client-secret "6256c0ba609a42a1881f69f4893454e1"))
#+end_src
** writeroom-mode
#+begin_src emacs-lisp
(use-package writeroom-mode
  :commands (writeroom-mode)
  :config
  (add-to-list 'writeroom-global-effects 'visual-line-mode)
  (setq writeroom-restore-window-config t
        writeroom-width 100))
#+end_src
** beacon
#+begin_src emacs-lisp
(use-package beacon
  :defer 2
  :diminish beacon-mode
  :config (beacon-mode 1))
#+end_src
** zen-mode
#+begin_src emacs-lisp
(use-package zen-mode :config (global-set-key (kbd "C-M-z") 'zen-mode))
#+end_src
* Themes
** doom-themes
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t
        doom-themes-treemacs-theme "doom-colors")
  (doom-themes-treemacs-config)
  (doom-themes-org-config)
  (load-theme 'doom-horizon t))
#+end_src
** kaolin-themes
#+begin_src emacs-lisp
(use-package kaolin-themes
  :config
  (kaolin-treemacs-theme))
#+end_src
** sublime-themes
#+begin_src emacs-lisp
(use-package sublime-themes :defer t)
#+end_src
** avk-emacs-theme
#+begin_src emacs-lisp
(use-package avk-emacs-themes :defer t)
#+end_src
** poet-theme
#+begin_src emacs-lisp
(use-package poet-theme :defer t)
#+end_src
** monotropic-theme
#+begin_src emacs-lisp
(use-package monotropic-theme :defer t)
#+end_src
